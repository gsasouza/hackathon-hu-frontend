"""Action data"""
type Action implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  title: String
  code: String
  unit: String
  situation: String
}

"""A connection to a list of items."""
type ActionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionEdge]
  count: Int
}

"""An edge in a connection."""
type ActionEdge {
  """The item at the end of the edge"""
  node: Action

  """A cursor for use in pagination"""
  cursor: String!
}

"""Article data"""
type Article implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  title: String
  authors: [String]
  doiCode: String
  publishDate: String
  category: String
  magazine: String
  url: String
}

input ArticleAddInput {
  title: String!
  description: String!
  category: String!
  tags: String
  clientMutationId: String
}

type ArticleAddPayload {
  article: Article
  error: String
  clientMutationId: String
}

"""A connection to a list of items."""
type ArticleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArticleEdge]
  count: Int
}

"""An edge in a connection."""
type ArticleEdge {
  """The item at the end of the edge"""
  node: Article

  """A cursor for use in pagination"""
  cursor: String!
}

"""Author data"""
type Author implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  name: String
  email: String
  unit: String
}

input AuthorAddInput {
  name: String!
  email: String!
  unit: String!
  clientMutationId: String
}

type AuthorAddPayload {
  article: Author
  error: String
  clientMutationId: String
}

"""A connection to a list of items."""
type AuthorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorEdge]
  count: Int
}

"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge"""
  node: Author

  """A cursor for use in pagination"""
  cursor: String!
}

input AuthorRemoveInput {
  id: ID!
  clientMutationId: String
}

type AuthorRemovePayload {
  error: String
  clientMutationId: String
}

input ChangePasswordInput {
  oldPassword: String!

  """user new password"""
  password: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  error: String
  me: User
  clientMutationId: String
}

"""Follow data"""
type Follow implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  article: Article
  user: User
}

input FollowAddInput {
  articleId: ID!
  clientMutationId: String
}

type FollowAddPayload {
  error: String
  clientMutationId: String
}

"""A connection to a list of items."""
type FollowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FollowEdge]
  count: Int
}

"""An edge in a connection."""
type FollowEdge {
  """The item at the end of the edge"""
  node: Follow

  """A cursor for use in pagination"""
  cursor: String!
}

input FollowRemoveInput {
  articleId: ID!
  clientMutationId: String
}

type FollowRemovePayload {
  error: String
  clientMutationId: String
}

"""Like data"""
type Like implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  article: Article
  user: User
}

input LikeAddInput {
  articleId: ID!
  clientMutationId: String
}

type LikeAddPayload {
  error: String
  clientMutationId: String
}

"""A connection to a list of items."""
type LikeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikeEdge]
  count: Int
}

"""An edge in a connection."""
type LikeEdge {
  """The item at the end of the edge"""
  node: Like

  """A cursor for use in pagination"""
  cursor: String!
}

input LikeRemoveInput {
  articleId: ID!
  clientMutationId: String
}

type LikeRemovePayload {
  error: String
  clientMutationId: String
}

input LoginEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

type Mutation {
  LoginEmail(input: LoginEmailInput!): LoginEmailPayload
  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload
  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload
  ArticleAdd(input: ArticleAddInput!): ArticleAddPayload
  AuthorAdd(input: AuthorAddInput!): AuthorAddPayload
  AuthorRemove(input: AuthorRemoveInput!): AuthorRemovePayload
  SignFeed(input: SignFeedInput!): SignFeedPayload
  SignFeedCancel(input: SignFeedCancelInput!): SignFeedCancelPayload
  SignFeedCancelCode(input: SignFeedCancelCodeInput!): SignFeedCancelCodePayload
  LikeAdd(input: LikeAddInput!): LikeAddPayload
  LikeRemove(input: LikeRemoveInput!): LikeRemovePayload
  FollowAdd(input: FollowAddInput!): FollowAddPayload
  FollowRemove(input: FollowRemoveInput!): FollowRemovePayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  me: User
  user(id: ID!): User
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
  article(id: ID!): Article
  articles(after: String, first: Int, before: String, last: Int, search: String): ArticleConnection
  action(id: ID!): Action
  actions(after: String, first: Int, before: String, last: Int, search: String): ActionConnection
  author(id: ID!): Author
  authors(after: String, first: Int, before: String, last: Int, search: String): AuthorConnection
  likesFromMe(article: ID!): Boolean
  likes(after: String, first: Int, before: String, last: Int): LikeConnection
  followsFromMe(article: ID!): Boolean
  follows(after: String, first: Int, before: String, last: Int): FollowConnection
}

input RegisterEmailInput {
  name: String!
  university: String!
  email: String!
  password: String!
  clientMutationId: String
}

type RegisterEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input SignFeedCancelCodeInput {
  email: String!
  clientMutationId: String
}

type SignFeedCancelCodePayload {
  error: String
  clientMutationId: String
}

input SignFeedCancelInput {
  email: String!
  clientMutationId: String
}

type SignFeedCancelPayload {
  email: String
  error: String
  clientMutationId: String
}

input SignFeedInput {
  email: String!
  clientMutationId: String
}

type SignFeedPayload {
  error: String
  clientMutationId: String
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  name: String
  isAdmin: Boolean
  email: String
  active: Boolean
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
  count: Int
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}
